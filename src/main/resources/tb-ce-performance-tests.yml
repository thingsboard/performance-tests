#
# Copyright Â© 2016-2025 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

spring.main.web-application-type: NONE
server:
  # Server bind address
  address: "0.0.0.0"
  # Server bind port
  port: "${SERVER_PORT:19090}"

management:
  endpoints:
    web:
      exposure:
        include: "${ENDPOINTS_WEB_EXPOSURE_INCLUDE:*}"
  endpoint:
    shutdown:
      enabled: "${ENDPOINT_SHUTDOWN_ENABLED:true}"
endpoints:
  shutdown:
    enabled: "${ENDPOINTS_SHUTDOWN_ENABLED:true}"

rest:
  connect_server: "${REST_CONNECT_SERVER:true}"
  # Http or https. Port can be omitted. Use the same web link as you usually login with your browser
  url: "${REST_URL:http://localhost:8080}"
  username: "${REST_USERNAME:tenant@thingsboard.org}"
  password: "${REST_PASSWORD:tenant}"
  pool_size: "${REST_POOL_SIZE:4}"
mqtt:
  # For MQTT use hostname or IP. For MQTTS use only hostname
  host: "${MQTT_HOST:localhost}"
  # Usually 1883 for MQTT or 8883 for MQTTS
  port: "${MQTT_PORT:1883}"
  ssl:
    enabled: "${MQTT_SSL_ENABLED:false}"
    # Java keystore file mqttclient.jks. If not set, it will use a default trusted certs for Java like ca-certificates pre-installed. Use custom JKS truststore only to deal with self-managed certificates
    key_store: "${MQTT_SSL_KEY_STORE:}"
    key_store_password: "${MQTT_SSL_KEY_STORE_PASSWORD:password}"
lwm2m:
  recommended_ciphers: "${LWM2M_RECOMMENDED_CIPHERS:false}"
  recommended_supported_groups: "${LWM2M_RECOMMENDED_SUPPORTED_GROUPS:false}"
  prefix_end_point: "${PREFIX_END_POINT:Lw}"
  noSec:
    enabled: "${NO_SEC_ENABLED:true}"
    server:
      host: "${NO_SEC_HOST:localhost}"
      port: "${NO_SEC_PORT:5685}"
    bootStrap:
      enabled: "${NO_SEC_BS_ENABLED:true}"
      host: "${NO_SEC_BS_HOST:localhost}"
      port: "${NO_SEC_BS_PORT:5687}"
  psk:
    enabled: "${PSK_ENABLED:true}"
    identity_sub: "${PSK_IDENTITY_SUB:_identity}"
    server:
      host: "${PSK_HOST:localhost}"
      port: "${PSK_PORT:5686}"
    bootStrap:
      enabled: "${PSK_BS_ENABLED:true}"
      host: "${PSK_BS_HOST:localhost}"
      port: "${PSK_BS_PORT:5688}"
  rpk:
    enabled: "${RPK_ENABLED:true}"
    server:
      host: "${RPK_HOST:localhost}"
      port: "${RPK_PORT:5686}"
    bootStrap:
      enabled: "${RPK_BS_ENABLED:true}"
      host: "${RPK_BS_HOST:localhost}"
      port: "${RPK_BS_PORT:5688}"
  x509:
    enabled: "${X509_ENABLED:true}"
    trust: "${X509_ENABLED_TRUST:true}"
    create:
      enabled: "${CREATE_NEW_KEY_STORE_JAVA:false}"
      # Files jks
      key_store_server_file: "${KEY_STORE_SERVER_FILE:lwm2mserver.jks}"
      key_store_client_file: "${KEY_STORE_CLIENT_FILE:lwm2mclient.jks}"
      key_store_client_no_trust_file: "${KEY_STORE_CLIENT_NO_TRUST_FILE:lwm2mclientnotrust.jks}"
      # Alias
      root_alias: "${ROOT_ALIAS:rootCA}"
      server_alias: "${SERVER_ALIAS:server}"
      bootstrap_alias: "${BOOTSTRAP_ALIAS:bootstrap}"
      client_alias_no_trust: "${CLIENT_ALIAS_NO_TRUST:client_not_trusted}"
      client_alias_private_key_no_trust: "${CLIENT_ALIAS_PRIVATE_KEY_NO_TRUST:client}"
      prefix_client_alias: "${CLIENT_ALIAS:client_alias_}"
      # CN
      root_endpoint: "${ROOT_CN:root.com}"
      server_endpoint: "${SERVER_CN:localhost}"
      bootstrap_endpoint: "${BOOTSTRAP_CN:bootstrap.bootstrap}"
      pref_sub_endpoint: "${PREF_SUB_CN:sub}"
#      start to 0
      sub_level: "${SUB_LEVEL:2}"
      client_no_trust_endpoint: "${CLIENT_NO_TRUST_ENDPOINT:deviceAEndpoint}"
      # PSW
      server_key_store_pwd: "${SERVER_KEY_STORE_PWD:server_ks_password}"
#      server_key_store_pwd: "${SERVER_KEY_STORE_PWD:server}"
      client_key_store_pwd: "${CLIENT_KEY_STORE_PWD:client_ks_password}"
      client_no_trust_key_store_pwd: "${CLIENT_NO_TRUST_KEY_STORE_PWD:client_ks_password}"
    create_new_key_store_sh: "${CREATE_NEW_KEY_STORE_SH:false}"
    server:
      host: "${X509_HOST:localhost}"
      port: "${X509_PORT:5686}"
    bootStrap:
      enabled: "${X509_BS_ENABLED:true}"
      host: "${X509_BS_HOST:localhost}"
      port: "${X509_BS_PORT:5688}"
  client:
    host: "${CLIENT_HOST:0.0.0.0}"
    startPort: "${START_PORT:10000}"
    # The communication period in seconds which should be smaller than the lifetime, will be used even if bootstrap_enable==true.
    communication_period: "${COMMUNICATION_PERIOD:}"
    # requestTimeoutInMs = 2 * 60 * 1000l; // 2min in ms
    # request_timeout: "${REQUEST_TIMEOUT:1000}"
    request_timeout: "${REQUEST_TIMEOUT:}"
device:
  # Device API to use - MQTT, HTTP or LWM2M
  api: "${DEVICE_API:MQTT}"
  startIdx: "${DEVICE_START_IDX:0}"
  endIdx: "${DEVICE_END_IDX:1000}"
  count: "${DEVICE_COUNT:1000}" # count of devices to be used by clients in k8s deployment run
  createOnStart: "${DEVICE_CREATE_ON_START:true}"
  deleteOnComplete: "${DEVICE_DELETE_ON_COMPLETE:false}"
gateway:
  startIdx: "${GATEWAY_START_IDX:0}"
  endIdx: "${GATEWAY_END_IDX:10}"
  count: "${GATEWAY_COUNT:3}" # count of devices to be used by clients in k8s deployment run
  createOnStart: "${GATEWAY_CREATE_ON_START:false}"
  deleteOnComplete: "${GATEWAY_DELETE_ON_COMPLETE:false}"
customer:
  startIdx: "${CUSTOMER_START_IDX:0}"
  endIdx: "${CUSTOMER_END_IDX:0}"
  createOnStart: "${CUSTOMER_CREATE_ON_START:true}"
  deleteOnComplete: "${CUSTOMER_DELETE_ON_COMPLETE:false}"
dashboard:
  createOnStart: "${DASHBOARD_CREATE_ON_START:true}"
  deleteOnComplete: "${DASHBOARD_DELETE_ON_COMPLETE:false}"
  deleteIfExists: "${DASHBOARD_DELETE_IF_EXISTS:false}"
  tenant: alarms.json # please use comma separated list for multiple dashboards: dashboard1.json, dashboard2.json
  shared: "devices.json"
warmup:
  enabled: "${WARMUP_ENABLED:true}"
  packSize: "${WARMUP_PACK_SIZE:100}"
test:
  # Type of the payload to send: DEFAULT, SMART_TRACKER, SMART_METER
  # RANDOM - TODO: add description
  # SMART_TRACKER - sample payload: {"latitude": 42.222222, "longitude": 73.333333, "speed": 55.5, "fuel": 92, "batteryLevel": 81}
  # SMART_METER - sample payload: {"pulseCounter": 1234567, "leakage": false, "batteryLevel": 81}
  # INDUSTRIAL_PLC - sample payload (60 lines by default) {"line001": 1.0023, "line002": 95.440321}
  payloadType: "${TEST_PAYLOAD_TYPE:SMART_METER}" # device profile name
  payloadDatapoints: "${TEST_PAYLOAD_DATAPOINTS:60}" # datapoints per single message (used for INDUSTRIAL_PLC)
  instanceIdx: "${INSTANCE_IDX:0}"
  useInstanceIdx: "${USE_INSTANCE_IDX:false}"
  useInstanceIdxRegex: "${USE_INSTANCE_IDX_REGEX:false}"
  instanceIdxRegexSource: "${INSTANCE_IDX_REGEX_SOURCE:}"
  instanceIdxRegex: "${INSTANCE_IDX_REGEX:([0-9]+)$}"
  enabled: "${TEST_ENABLED:true}"
  updateRootRuleChain: "${UPDATE_ROOT_RULE_CHAIN:false}"
  revertRootRuleChain: "${REVERT_ROOT_RULE_CHAIN:false}"
  # Test API to use - device, gateway or lwm2m
  # If Device API == LWM2M only - lwm2m
  api: "${TEST_API:device}"
  sequential: "${TEST_SEQUENTIAL:false}"
  ruleChainName:  "${RULE_CHAIN_NAME:root_rule_chain_ce.json}"
  # messages per second.
  telemetry: "${TEST_TELEMETRY:true}"
  mps: "${MESSAGES_PER_SECOND:1000}"
  duration: "${DURATION_IN_SECONDS:300}"
  alarms:
    start: "${ALARM_STORM_START_SECOND:0}"
    end: "${ALARM_STORM_END_SECOND:999999}"
    # alarms per second should be less them messages per second.
    aps: "${ALARMS_PER_SECOND:1}"
  exitAfterComplete: "${EXIT_AFTER_COMPLETE:true}" # this useful for kubernetes statefulset setup
  seed: "${SEED:0}" # random seed to provide reproducible random order on each run
